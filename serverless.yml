service: virtual-archive-db

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    userTableName: ${self:custom.userTableName}
    catalogueTableName: ${self:custom.catalogueTableName}
    itemTableName: ${self:custom.itemTableName}
    reminderTableName: ${self:custom.reminderTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  userTableName: users
  catalogueTableName: catalogues
  itemTableName: items
  reminderTableName: reminders

functions:
  getCatalogue:
    handler: ./app/Endpoints/Catalogue/getCatalogue.handler
    description: Get catalogue by UUID
    events:
      - http:
          path: catalogue/{UUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getCatalogueByName:
    handler: ./app/Endpoints/Catalogue/getCatalogueByName.handler
    description: Get catalogue by Name
    events:
      - http:
          path: catalogue-by-name/{CatalogueName}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  deleteCatalogue:
    handler: ./app/Endpoints/Catalogue/deleteCatalogue.handler
    description: delete catalogue by UUID
    events:
      - http:
          path: catalogue/{UUID}
          method: DELETE
          cors:
            origin: '*'
            headers: '*'
  getCatalogueByUserID:
    handler: ./app/Endpoints/Catalogue/getCataloguesByUserID.handler
    description: Get catalogue by User ID
    events:
      - http:
          path: catalogue-by-user
          method: GET
          cors:
            origin: '*'
            headers: '*'
  createCatalogue:
    handler: ./app/Endpoints/Catalogue/createCatalogue.handler
    description: Create a new catalogue
    events:
      - http:
          path: catalogue/new
          method: POST
          cors:
            origin: '*'
            headers: '*'
  getChildCatalogues:
    handler: ./app/Endpoints/Catalogue/getChildCatalogues.handler
    description: Get catalogue by User ID
    events:
      - http:
          path: child-catalogue/{ParentCatalogueUUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  updateCatalogue:
    handler: ./app/Endpoints/Catalogue/updateCatalogue.handler
    description: update catalogue
    events:
      - http:
          path: catalogue/edit
          method: PUT
          cors:
            origin: '*'
            headers: '*'
  getItem:
    handler: ./app/Endpoints/Item/getItem.handler
    description: Get item by UUID
    events:
      - http:
          path: item/{UUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  createItem:
    handler: ./app/Endpoints/Item/createItem.handler
    description: Create a new item
    events:
      - http:
          path: item/new
          method: POST
          cors:
            origin: '*'
            headers: '*'
  updateItem:
    handler: ./app/Endpoints/Item/updateItem.handler
    description: Update item
    events:
      - http:
          path: item/edit
          method: PUT
          cors:
            origin: '*'
            headers: '*'
  deleteitem:
    handler: ./app/Endpoints/Item/deleteItem.handler
    description: delete catalogue by UUID
    events:
      - http:
          path: item/{UUID}
          method: DELETE
          cors:
            origin: '*'
            headers: '*'
  getItemByName:
    handler: ./app/Endpoints/Item/getItemByName.handler
    description: Get item by Name
    events:
      - http:
          path: item-by-name/{ItemName}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getItemByCatalogueUUID:
    handler: ./app/Endpoints/Item/getItemByCatalogueID.handler
    description: Get item by CatalogueUUID
    events:
      - http:
          path: item-by-catalogue-uuid/{CatalogueUUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getDescriptionOfItem:
    handler: ./app/Endpoints/Item/getDescription.handler
    description: Get description by catalogue and item names
    events:
      - http:
          path: item-description/{CatalogueName}/{ItemName}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getUuidOfItem:
    handler: ./app/Endpoints/Item/getItemUuid.handler
    description: Get uuid by catalogue and item names
    events:
      - http:
          path: item-uuid/{CatalogueName}/{ItemName}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getReminder:
    handler: ./app/Endpoints/Reminder/getReminder.handler
    description: Get reminder by UUID
    events:
      - http:
          path: reminder/{UUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  createReminder:
    handler: ./app/Endpoints/Reminder/createReminder.handler
    description: Create a new reminder
    events:
      - http:
          path: reminder/new
          method: POST
          cors:
            origin: '*'
            headers: '*'
  getReminderByItemID:
    handler: ./app/Endpoints/Reminder/getReminderByItem.handler
    description: Get reminder by Item UUID
    events:
      - http:
          path: reminder-by-item/{ItemUUID}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getReminderByDate:
    handler: ./app/Endpoints/Reminder/getRemindersByDate.handler
    description: Get reminder by Date
    events:
      - http:
          path: reminder-by-date/{ReminderDate}
          method: GET
          cors:
            origin: '*'
            headers: '*'
  getReminderByUser:
    handler: ./app/Endpoints/Reminder/getReminderByUser.handler
    description: Get reminder by User
    events:
      - http:
          path: reminder-by-user
          method: GET
          cors:
            origin: '*'
            headers: '*'
  deleteReminder:
    handler: ./app/Endpoints/Reminder/deleteReminder.handler
    description: Delete reminder by UUID
    events:
      - http:
          path: reminder/{UUID}
          method: DELETE
          cors:
            origin: '*'
            headers: '*'
  updateReminder:
    handler: ./app/Endpoints/Reminder/updateReminder.handler
    description: update reminder
    events:
      - http:
          path: reminder/edit
          method: PUT
          cors:
            origin: '*'
            headers: '*'

resources:
  Resources:
    CatalogueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.catalogueTableName}
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S
          - AttributeName: UUID
            AttributeType: S
          - AttributeName: CatalogueName
            AttributeType: S
          - AttributeName: ParentCatalogueUUID
            AttributeType: S
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
          - AttributeName: UUID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: catalogue-name-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: CatalogueName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: user-id-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: parent-uuid-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: ParentCatalogueUUID
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    ItemTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.itemTableName}
        AttributeDefinitions:
          - AttributeName: UUID
            AttributeType: S
          - AttributeName: ItemName
            AttributeType: S
          - AttributeName: CatalogueUUID
            AttributeType: S
          - AttributeName: UserID
            AttributeType: S
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
          - AttributeName: UUID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: item-name-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: ItemName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: catalogue-uuid-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: CatalogueUUID
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: user-id-index
            KeySchema:
                - AttributeName: UserID
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
    ReminderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.reminderTableName}
        AttributeDefinitions:
          - AttributeName: UUID
            AttributeType: S
          - AttributeName: ReminderDate
            AttributeType: S
          - AttributeName: UserID
            AttributeType: S
          - AttributeName: ItemUUID
            AttributeType: S
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
          - AttributeName: UUID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: reminder-date-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: ReminderDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: reminder-user-id-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: reminder-item-id-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
              - AttributeName: ItemUUID
                KeyType: RANGE
            Projection:
              ProjectionType: ALL



